"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1279],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),l=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=l(t.components);return a.createElement(p.Provider,{value:e},t.children)},u="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},y=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,p=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),u=l(n),y=r,d=u["".concat(p,".").concat(y)]||u[y]||c[y]||o;return n?a.createElement(d,i(i({ref:e},m),{},{components:n})):a.createElement(d,i({ref:e},m))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=y;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s[u]="string"==typeof t?t:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},234:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={title:"TypeORM CreateDateColumn \ub370\ucf54\ub808\uc774\ud130\uc640 value transformer \ubb38\uc81c",slug:"2021/12/09/TypeORM-CreateDateColumn-\ub370\ucf54\ub808\uc774\ud130\uc640-value-transformer-\ubb38\uc81c",authors:"jake",tags:["typeorm","transformer","CreateDateColumn"]},i=void 0,s={permalink:"/2021/12/09/TypeORM-CreateDateColumn-\ub370\ucf54\ub808\uc774\ud130\uc640-value-transformer-\ubb38\uc81c",editUrl:"https://github.com/jbl428/jbl428.github.io/edit/main/blog/2021-12-09-typeorm-transformer/index.mdx",source:"@site/blog/2021-12-09-typeorm-transformer/index.mdx",title:"TypeORM CreateDateColumn \ub370\ucf54\ub808\uc774\ud130\uc640 value transformer \ubb38\uc81c",description:"\ubb38\uc81c \uc0c1\ud669",date:"2021-12-09T00:00:00.000Z",formattedDate:"2021\ub144 12\uc6d4 9\uc77c",tags:[{label:"typeorm",permalink:"/tags/typeorm"},{label:"transformer",permalink:"/tags/transformer"},{label:"CreateDateColumn",permalink:"/tags/create-date-column"}],readingTime:4.36,hasTruncateMarker:!0,authors:[{name:"Jake Son",title:"Backend Developer",url:"https://github.com/jbl428",imageURL:"https://avatars.githubusercontent.com/u/22140938?v=4",key:"jake"}],frontMatter:{title:"TypeORM CreateDateColumn \ub370\ucf54\ub808\uc774\ud130\uc640 value transformer \ubb38\uc81c",slug:"2021/12/09/TypeORM-CreateDateColumn-\ub370\ucf54\ub808\uc774\ud130\uc640-value-transformer-\ubb38\uc81c",authors:"jake",tags:["typeorm","transformer","CreateDateColumn"]},prevItem:{title:"kotlin \ud658\uacbd\uc5d0\uc11c Querydsl \uc124\uc815\ud558\uae30",permalink:"/2022/01/05/kotlin-\ud658\uacbd\uc5d0\uc11c-Querydsl-\uc124\uc815\ud558\uae30"},nextItem:{title:"Promise\uc640 Monad - 2",permalink:"/2021/11/28/Promise\uc640-Monad-2"}},p={authorsImageUrls:[void 0]},l=[{value:"\ubb38\uc81c \uc0c1\ud669",id:"\ubb38\uc81c-\uc0c1\ud669",level:3},{value:"\ud574\uacb0 \ubc29\uc548",id:"\ud574\uacb0-\ubc29\uc548",level:3}],m={toc:l},u="wrapper";function c(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\ubb38\uc81c-\uc0c1\ud669"},"\ubb38\uc81c \uc0c1\ud669"),(0,r.kt)("p",null,"\ubcf4\ud1b5 \ud14c\uc774\ube14\uc5d0 \uae30\ubcf8\uc73c\ub85c \ub123\ub294 \uc0dd\uc131\uc2dc\uac04\uacfc, \uc218\uc815\uc2dc\uac04 \ud544\ub4dc\ub97c \ucd94\uac00\ud558\uae30 \uc704\ud574 typeorm \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0\uc11c\ub294 \ub370\ucf54\ub808\uc774\ud130\uc640 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud55c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc608\ub97c\ub4e4\uc5b4 \uc544\ub798\uc640 \uac19\uc740 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e0 \ud6c4 \ub2e4\ub978 \uc5d4\ud2f0\ud2f0 \ud074\ub798\uc2a4\uac00 \uc0c1\uc18d\ubc1b\ub294 \ubc29\ubc95\uc73c\ub85c \uad6c\ud604\ud558\uac8c \ub41c\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { CreateDateColumn, UpdateDateColumn } from "typeorm";\n\nexport abstract class BaseEntity {\n  @CreateDateColumn({ type: "timestamp" })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: "timestamp" })\n  updatedAt: Date;\n}\n')),(0,r.kt)("p",null,"\ud558\uc9c0\ub9cc \uac01 \ud544\ub4dc\uc758 \ud0c0\uc785\uc744 Date \ub300\uc2e0 \uc11c\ub4dc\ud30c\ud2f0 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ub0a0\uc9dc \ud0c0\uc785\uc73c\ub85c \ubc14\uafb8\uae30 \uc704\ud574\uc11c\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"value transformer")," \ub97c \uc0ac\uc6a9\ud574\uc57c \ud558\uc9c0\ub9cc \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { CreateDateColumn, UpdateDateColumn } from "typeorm";\nimport { LocatDateTime } from "@js-joda/core";\n\nexport abstract class BaseEntity {\n  @CreateDateColumn({\n    type: "timestamp",\n    transformer: new LocalDateTransformer(),\n  })\n  createdAt: LocalDateTime;\n\n  @UpdateDateColumn({\n    type: "timestamp",\n    transformer: new LocalDateTransformer(),\n  })\n  updatedAt: LocalDateTime;\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"\uc5ec\uae30\uc11c LocalDateTransformer \ub294 typeorm \uc758 ValueTransformer \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud55c \ud074\ub798\uc2a4\ub85c\njs \uc758 Date \uc640 LocalDateTime \uac04\uc758 \ubcc0\ud658\ub85c\uc9c1\uc774 \uc788\ub2e4.  ")),(0,r.kt)("p",null,"typeorm \uacf5\uc2dd \uc800\uc7a5\uc18c\uc5d0 \uc774\uc640\uac19\uc740 \uc774\uc288\uac00 \uc62c\ub77c\uc640 \uc788\uc9c0\ub9cc (2020\ub144 12\uc6d4) \uc544\uc9c1\ub3c4 \ud574\uacb0\ub418\uc9c0 \uc54a\uace0\uc788\ub2e4."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/typeorm/typeorm/issues/7150"},"UpdateDateColumn fails with transformer"))),(0,r.kt)("h3",{id:"\ud574\uacb0-\ubc29\uc548"},"\ud574\uacb0 \ubc29\uc548"),(0,r.kt)("p",null,"\uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 ",(0,r.kt)("inlineCode",{parentName:"p"},"@CreateDateColumn")," \ub370\ucf54\ub808\uc774\ud130 \ub300\uc2e0 ",(0,r.kt)("inlineCode",{parentName:"p"},"@Column"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@BeforeInsert"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@BeforeUpdate")," \ub97c \ud65c\uc6a9\ud55c\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { BeforeInsert, BeforeUpdate, Column } from "typeorm";\nimport { LocalDateTime } from "@js-joda/core";\n\nexport abstract class BaseEntity {\n  @Column({\n    type: "timestamptz",\n    transformer: new LocalDateTimeTransformer(),\n    nullable: false,\n    update: false,\n  })\n  createdAt: LocalDateTime;\n\n  @Column({\n    type: "timestamptz",\n    transformer: new LocalDateTimeTransformer(),\n    nullable: false,\n  })\n  updatedAt: LocalDateTime;\n\n  @BeforeInsert()\n  protected beforeInsert() {\n    this.createdAt = LocalDateTime.now();\n    this.updatedAt = LocalDateTime.now();\n  }\n\n  @BeforeUpdate()\n  protected beforeUpdate() {\n    this.updatedAt = LocalDateTime.now();\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@BeforeInsert")," \uc640 ",(0,r.kt)("inlineCode",{parentName:"p"},"@BeforeUpdate")," \ub294 \uc774\ub984 \uadf8\ub300\ub85c \ud14c\uc774\ube14\uc5d0 \uc0c8\ub85c\uc6b4 row \uac00 \ucd94\uac00\ub418\uae30 \uc804\uc774\ub098 \uae30\uc874 row \uc218\uc815\uc791\uc5c5 \uc804\uc5d0 \uc2e4\ud589\ub41c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc815\uc0c1 \ub3d9\uc791\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8\ucf54\ub4dc\ub97c \uc791\uc131\ud574\ubcf4\uc790."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Connection,\n  createConnection,\n  Entity,\n  PrimaryGeneratedColumn,\n  Repository,\n} from "typeorm";\nimport { LocalDateTime } from "@js-joda/core";\n\n@Entity()\nclass TestEntity extends BaseEntity {\n  @PrimaryGeneratedColumn("increment")\n  id: number;\n}\n\ndescribe("TestEntityRepository", () => {\n  let testEntityRepository: Repository<TestEntity>;\n  let connection: Connection;\n\n  beforeAll(async () => {\n    connection = await createConnection({\n      type: "postgres",\n      host: "localhost",\n      port: 5432,\n      username: "test",\n      password: "test",\n      database: "test",\n      entities: [TestEntity],\n      synchronize: true,\n    });\n\n    testEntityRepository = connection.getRepository(TestEntity);\n  });\n\n  afterAll(() => connection.close());\n\n  beforeEach(() => testEntityRepository.clear());\n\n  it("save \uba54\uc18c\ub4dc\ub85c insert \uc2dc createdAt, updatedAt \uc774 \ud604\uc7ac\uc2dc\uac04\uc73c\ub85c \ub4e4\uc5b4\uac04\ub2e4", async () => {\n    // given\n    const nowTime = LocalDateTime.now();\n    const entity = new TestEntity();\n\n    // when\n    const testEntity = await testEntityRepository.save(entity);\n\n    // then\n    expect(testEntity.createdAt.isAfter(nowTime)).toBeTruthy();\n    expect(testEntity.updatedAt.isAfter(nowTime)).toBeTruthy();\n  });\n\n  it("insert \uba54\uc18c\ub4dc\ub85c insert \uc2dc createdAt, updatedAt \uc774 \ud604\uc7ac\uc2dc\uac04\uc73c\ub85c \ub4e4\uc5b4\uac04\ub2e4", async () => {\n    // given\n    const nowTime = LocalDateTime.now();\n    const entity = new TestEntity();\n\n    // when\n    await testEntityRepository.insert(entity);\n\n    // then\n    const testEntity = await testEntityRepository.findOneOrFail();\n    expect(testEntity.createdAt.isAfter(nowTime)).toBeTruthy();\n    expect(testEntity.updatedAt.isAfter(nowTime)).toBeTruthy();\n  });\n\n  it("save \uba54\uc18c\ub4dc\ub85c \uc5d4\ud2f0\ud2f0 \uc5c5\ub370\uc774\ud2b8 \uc2dc updatedAt \uc774 \uac31\uc2e0\ub41c\ub2e4", async () => {\n    // given\n    const testEntity = await testEntityRepository.save(new TestEntity());\n    const before = testEntity.updatedAt;\n\n    // when\n    const updatedTestEntity = await testEntityRepository.save(testEntity);\n\n    // then\n    expect(updatedTestEntity.updatedAt.isAfter(before)).toBeTruthy();\n  });\n\n  it("update \uba54\uc18c\ub4dc\ub85c \uc5d4\ud2f0\ud2f0 \uc5c5\ub370\uc774\ud2b8 \uc2dc updatedAt \uc774 \uac31\uc2e0\ub41c\ub2e4", async () => {\n    const testEntity = await testEntityRepository.save(new TestEntity());\n    const before = testEntity.updatedAt;\n\n    // when\n    await testEntityRepository.update(testEntity.id, testEntity);\n\n    // then\n    const updatedTestEntity = await testEntityRepository.findOneOrFail();\n    expect(updatedTestEntity.updatedAt.isAfter(before)).toBeTruthy();\n  });\n});\n')),(0,r.kt)("p",null,"\ub300\ubd80\ubd84\uc758 \uc0c1\ud669\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c \ub3d9\uc791\ud558\uc9c0\ub9cc ",(0,r.kt)("inlineCode",{parentName:"p"},"queryBuilder")," \ub97c \uc0ac\uc6a9\ud574 update \ub97c \uc218\ud589\ud560 \ub54c\uc5d0\ub294 updatedAt \uc774 \uac31\uc2e0\ub418\uc9c0 \uc54a\ub294\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'it("queryBuilder \ub85c \uc5c5\ub370\uc774\ud2b8 \uc2dc updatedAt \uac31\uc2e0\ub418\uc9c0 \uc54a\ub294\ub2e4", async () => {\n  // given\n  const testEntity = await testEntityRepository.save(new TestEntity());\n  const before = testEntity.updatedAt;\n\n  // when\n  await testEntityRepository\n    .createQueryBuilder("testEntity")\n    .update()\n    .set({ id: 3 })\n    .execute();\n\n  // then\n  const updatedTestEntity = await testEntityRepository.findOneOrFail();\n  expect(updatedTestEntity.updatedAt.isEqual(before)).toBeTruthy();\n});\n')),(0,r.kt)("p",null,"\uc704 \uacbd\uc6b0\uc5d0\ub294 \uba85\uc2dc\uc801\uc73c\ub85c \ud604\uc7ac\uc2dc\uac04\uc744 \ub123\uc5b4\uc8fc\uc5b4\uc57c \ud55c\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'it("queryBuilder \ub85c \uc5c5\ub370\uc774\ud2b8 \uc2dc updatedAt \uac31\uc2e0\ub41c\ub2e4", async () => {\n  // given\n  const testEntity = await testEntityRepository.save(new TestEntity());\n  const before = testEntity.updatedAt;\n\n  // when\n  await testEntityRepository\n    .createQueryBuilder("testEntity")\n    .update()\n    .set({ id: 100, updatedAt: LocalDateTime.now() })\n    .execute();\n\n  // then\n  const updatedTestEntity = await testEntityRepository.findOneOrFail();\n  expect(updatedTestEntity.updatedAt.isAfter(before)).toBeTruthy();\n});\n')))}c.isMDXComponent=!0}}]);